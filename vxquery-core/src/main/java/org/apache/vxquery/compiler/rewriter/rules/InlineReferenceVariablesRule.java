/*
 * Copyright 2009-2013 by The Regents of the University of California
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * you may obtain a copy of the License from
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.vxquery.compiler.rewriter.rules;

import java.util.List;

import org.apache.commons.lang3.mutable.Mutable;

import edu.uci.ics.hyracks.algebricks.common.exceptions.AlgebricksException;
import edu.uci.ics.hyracks.algebricks.core.algebra.base.ILogicalExpression;
import edu.uci.ics.hyracks.algebricks.core.algebra.base.ILogicalOperator;
import edu.uci.ics.hyracks.algebricks.core.algebra.base.ILogicalPlan;
import edu.uci.ics.hyracks.algebricks.core.algebra.base.IOptimizationContext;
import edu.uci.ics.hyracks.algebricks.core.algebra.base.LogicalOperatorTag;
import edu.uci.ics.hyracks.algebricks.core.algebra.base.LogicalVariable;
import edu.uci.ics.hyracks.algebricks.core.algebra.operators.logical.AbstractLogicalOperator;
import edu.uci.ics.hyracks.algebricks.core.algebra.operators.logical.AbstractOperatorWithNestedPlans;
import edu.uci.ics.hyracks.algebricks.core.algebra.operators.logical.AssignOperator;
import edu.uci.ics.hyracks.algebricks.rewriter.rules.InlineVariablesRule;

/**
 * Replaces variable reference expressions with their assigned function-call expression where applicable
 * (some variables are generated by datasources).
 * Inlining variables may enable other optimizations by allowing selects and assigns to be moved
 * (e.g., a select may be pushed into a join to enable an efficient physical join operator).
 * 
 * <pre>
 * Preconditions/Assumptions:
 * Assumes no projects are in the plan. Only inlines variables whose assigned expression is a function call
 * (i.e., this rule ignores right-hand side constants and other variable references expressions
 * 
 * Postconditions/Examples:
 * All qualifying variables have been inlined.
 * 
 * Example (simplified):
 * 
 * Before plan:
 * select <- [$$1 < $$2 + $$0]
 *   assign [$$2] <- [funcZ() + $$0]
 *     assign [$$0, $$1] <- [funcX(), funcY()]
 * 
 * After plan:
 * select <- [funcY() < funcZ() + funcX() + funcX()]
 *   assign [$$2] <- [funcZ() + funcX()]
 *     assign [$$0, $$1] <- [funcX(), funcY()]
 * </pre>
 */
public class InlineReferenceVariablesRule extends InlineVariablesRule {

    protected IInlineReferenceVariablePolicy policy;

    public InlineReferenceVariablesRule() {
        super();
        policy = new InlineReferenceVariablePolicy();
    }

    public InlineReferenceVariablesRule(IInlineReferenceVariablePolicy policy) {
        super();
        this.policy = policy;
    }

    @Override
    protected boolean performBottomUpAction(AbstractLogicalOperator op) throws AlgebricksException {
        if (policy.isCanidateInlineTarget(op)) {
            inlineVisitor.setOperator(op);
            return op.acceptExpressionTransform(inlineVisitor);
        }
        return false;
    }

    @Override
    protected boolean inlineVariables(Mutable<ILogicalOperator> opRef, IOptimizationContext context)
            throws AlgebricksException {
        AbstractLogicalOperator op = (AbstractLogicalOperator) opRef.getValue();

        // Update mapping from variables to expressions during top-down traversal.
        if (op.getOperatorTag() == LogicalOperatorTag.ASSIGN) {
            AssignOperator assignOp = (AssignOperator) op;
            List<LogicalVariable> vars = assignOp.getVariables();
            List<Mutable<ILogicalExpression>> exprs = assignOp.getExpressions();
            for (int i = 0; i < vars.size(); i++) {
                ILogicalExpression expr = exprs.get(i).getValue();
                if (policy.isCandidateForInlining(expr)) {
                    varAssignRhs.put(vars.get(i), exprs.get(i).getValue());
                }
            }
        }

        // Descend into children removing projects on the way.  
        boolean modified = false;
        for (Mutable<ILogicalOperator> inputOpRef : op.getInputs()) {
            // Descend into nested plans.
            if (op.hasNestedPlans()) {
                AbstractOperatorWithNestedPlans o2 = (AbstractOperatorWithNestedPlans) op;
                for (ILogicalPlan p : o2.getNestedPlans()) {
                    for (Mutable<ILogicalOperator> rootOpRef : p.getRoots()) {
                        if (inlineVariables(rootOpRef, context)) {
                            modified = true;
                        }
                    }
                }
            }
            // Children
            if (inlineVariables(inputOpRef, context)) {
                modified = true;
            }
        }

        if (performBottomUpAction(op)) {
            modified = true;
        }

        if (modified) {
            context.computeAndSetTypeEnvironmentForOperator(op);
            context.addToDontApplySet(this, op);
            // Re-enable rules that we may have already tried. They could be applicable now after inlining.
            context.removeFromAlreadyCompared(opRef.getValue());
        }

        return modified;
    }

    public static interface IInlineReferenceVariablePolicy {

        public boolean isCandidateForInlining(ILogicalExpression expr);

        public boolean isCanidateInlineTarget(AbstractLogicalOperator op);

    }

}
